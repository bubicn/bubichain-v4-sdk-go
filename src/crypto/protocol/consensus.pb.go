// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        (unknown)
// source: consensus.proto

package protocol

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PbftMessageType int32

const (
	PbftMessageType_PBFT_TYPE_PREPREPARE              PbftMessageType = 0
	PbftMessageType_PBFT_TYPE_PREPARE                 PbftMessageType = 1
	PbftMessageType_PBFT_TYPE_COMMIT                  PbftMessageType = 2
	PbftMessageType_PBFT_TYPE_VIEWCHANGE              PbftMessageType = 3
	PbftMessageType_PBFT_TYPE_NEWVIEW                 PbftMessageType = 4
	PbftMessageType_PBFT_TYPE_VIEWCHANG_WITH_RAWVALUE PbftMessageType = 5
)

// Enum value maps for PbftMessageType.
var (
	PbftMessageType_name = map[int32]string{
		0: "PBFT_TYPE_PREPREPARE",
		1: "PBFT_TYPE_PREPARE",
		2: "PBFT_TYPE_COMMIT",
		3: "PBFT_TYPE_VIEWCHANGE",
		4: "PBFT_TYPE_NEWVIEW",
		5: "PBFT_TYPE_VIEWCHANG_WITH_RAWVALUE",
	}
	PbftMessageType_value = map[string]int32{
		"PBFT_TYPE_PREPREPARE":              0,
		"PBFT_TYPE_PREPARE":                 1,
		"PBFT_TYPE_COMMIT":                  2,
		"PBFT_TYPE_VIEWCHANGE":              3,
		"PBFT_TYPE_NEWVIEW":                 4,
		"PBFT_TYPE_VIEWCHANG_WITH_RAWVALUE": 5,
	}
)

func (x PbftMessageType) Enum() *PbftMessageType {
	p := new(PbftMessageType)
	*p = x
	return p
}

func (x PbftMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PbftMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_consensus_proto_enumTypes[0].Descriptor()
}

func (PbftMessageType) Type() protoreflect.EnumType {
	return &file_consensus_proto_enumTypes[0]
}

func (x PbftMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PbftMessageType.Descriptor instead.
func (PbftMessageType) EnumDescriptor() ([]byte, []int) {
	return file_consensus_proto_rawDescGZIP(), []int{0}
}

type PbftValueType int32

const (
	PbftValueType_PBFT_VALUE_TX    PbftValueType = 0
	PbftValueType_PBFT_VALUE_TXSET PbftValueType = 1
)

// Enum value maps for PbftValueType.
var (
	PbftValueType_name = map[int32]string{
		0: "PBFT_VALUE_TX",
		1: "PBFT_VALUE_TXSET",
	}
	PbftValueType_value = map[string]int32{
		"PBFT_VALUE_TX":    0,
		"PBFT_VALUE_TXSET": 1,
	}
)

func (x PbftValueType) Enum() *PbftValueType {
	p := new(PbftValueType)
	*p = x
	return p
}

func (x PbftValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PbftValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_consensus_proto_enumTypes[1].Descriptor()
}

func (PbftValueType) Type() protoreflect.EnumType {
	return &file_consensus_proto_enumTypes[1]
}

func (x PbftValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PbftValueType.Descriptor instead.
func (PbftValueType) EnumDescriptor() ([]byte, []int) {
	return file_consensus_proto_rawDescGZIP(), []int{1}
}

type FeeConfig_Type int32

const (
	FeeConfig_UNKNOWN      FeeConfig_Type = 0
	FeeConfig_GAS_PRICE    FeeConfig_Type = 1
	FeeConfig_BASE_RESERVE FeeConfig_Type = 2
)

// Enum value maps for FeeConfig_Type.
var (
	FeeConfig_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "GAS_PRICE",
		2: "BASE_RESERVE",
	}
	FeeConfig_Type_value = map[string]int32{
		"UNKNOWN":      0,
		"GAS_PRICE":    1,
		"BASE_RESERVE": 2,
	}
)

func (x FeeConfig_Type) Enum() *FeeConfig_Type {
	p := new(FeeConfig_Type)
	*p = x
	return p
}

func (x FeeConfig_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeeConfig_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_consensus_proto_enumTypes[2].Descriptor()
}

func (FeeConfig_Type) Type() protoreflect.EnumType {
	return &file_consensus_proto_enumTypes[2]
}

func (x FeeConfig_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeeConfig_Type.Descriptor instead.
func (FeeConfig_Type) EnumDescriptor() ([]byte, []int) {
	return file_consensus_proto_rawDescGZIP(), []int{13, 0}
}

//PBFT protocol
type PbftPrePrepare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewNumber  int64  `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`
	Sequence    int64  `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	ReplicaId   int64  `protobuf:"varint,3,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	Value       []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	ValueDigest []byte `protobuf:"bytes,5,opt,name=value_digest,json=valueDigest,proto3" json:"value_digest,omitempty"`
}

func (x *PbftPrePrepare) Reset() {
	*x = PbftPrePrepare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbftPrePrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbftPrePrepare) ProtoMessage() {}

func (x *PbftPrePrepare) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbftPrePrepare.ProtoReflect.Descriptor instead.
func (*PbftPrePrepare) Descriptor() ([]byte, []int) {
	return file_consensus_proto_rawDescGZIP(), []int{0}
}

func (x *PbftPrePrepare) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *PbftPrePrepare) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PbftPrePrepare) GetReplicaId() int64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *PbftPrePrepare) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PbftPrePrepare) GetValueDigest() []byte {
	if x != nil {
		return x.ValueDigest
	}
	return nil
}

type PbftPrepare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewNumber  int64  `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`
	Sequence    int64  `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	ReplicaId   int64  `protobuf:"varint,3,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	ValueDigest []byte `protobuf:"bytes,4,opt,name=value_digest,json=valueDigest,proto3" json:"value_digest,omitempty"`
}

func (x *PbftPrepare) Reset() {
	*x = PbftPrepare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbftPrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbftPrepare) ProtoMessage() {}

func (x *PbftPrepare) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbftPrepare.ProtoReflect.Descriptor instead.
func (*PbftPrepare) Descriptor() ([]byte, []int) {
	return file_consensus_proto_rawDescGZIP(), []int{1}
}

func (x *PbftPrepare) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *PbftPrepare) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PbftPrepare) GetReplicaId() int64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *PbftPrepare) GetValueDigest() []byte {
	if x != nil {
		return x.ValueDigest
	}
	return nil
}

type PbftCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewNumber  int64  `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`
	Sequence    int64  `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	ReplicaId   int64  `protobuf:"varint,3,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	ValueDigest []byte `protobuf:"bytes,4,opt,name=value_digest,json=valueDigest,proto3" json:"value_digest,omitempty"`
}

func (x *PbftCommit) Reset() {
	*x = PbftCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbftCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbftCommit) ProtoMessage() {}

func (x *PbftCommit) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbftCommit.ProtoReflect.Descriptor instead.
func (*PbftCommit) Descriptor() ([]byte, []int) {
	return file_consensus_proto_rawDescGZIP(), []int{2}
}

func (x *PbftCommit) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *PbftCommit) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PbftCommit) GetReplicaId() int64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *PbftCommit) GetValueDigest() []byte {
	if x != nil {
		return x.ValueDigest
	}
	return nil
}

type PbftPreparedSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrePrepare *PbftEnv   `protobuf:"bytes,1,opt,name=pre_prepare,json=prePrepare,proto3" json:"pre_prepare,omitempty"`
	Prepare    []*PbftEnv `protobuf:"bytes,2,rep,name=prepare,proto3" json:"prepare,omitempty"`
}

func (x *PbftPreparedSet) Reset() {
	*x = PbftPreparedSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbftPreparedSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbftPreparedSet) ProtoMessage() {}

func (x *PbftPreparedSet) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbftPreparedSet.ProtoReflect.Descriptor instead.
func (*PbftPreparedSet) Descriptor() ([]byte, []int) {
	return file_consensus_proto_rawDescGZIP(), []int{3}
}

func (x *PbftPreparedSet) GetPrePrepare() *PbftEnv {
	if x != nil {
		return x.PrePrepare
	}
	return nil
}

func (x *PbftPreparedSet) GetPrepare() []*PbftEnv {
	if x != nil {
		return x.Prepare
	}
	return nil
}

type PbftViewChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewNumber         int64  `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"`                          //v+1
	Sequence           int64  `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`                                                //last execution seq
	PrepredValueDigest []byte `protobuf:"bytes,3,opt,name=prepred_value_digest,json=prepredValueDigest,proto3" json:"prepred_value_digest,omitempty"` //prepared value hash
	ReplicaId          int64  `protobuf:"varint,4,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
}

func (x *PbftViewChange) Reset() {
	*x = PbftViewChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbftViewChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbftViewChange) ProtoMessage() {}

func (x *PbftViewChange) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbftViewChange.ProtoReflect.Descriptor instead.
func (*PbftViewChange) Descriptor() ([]byte, []int) {
	return file_consensus_proto_rawDescGZIP(), []int{4}
}

func (x *PbftViewChange) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *PbftViewChange) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PbftViewChange) GetPrepredValueDigest() []byte {
	if x != nil {
		return x.PrepredValueDigest
	}
	return nil
}

func (x *PbftViewChange) GetReplicaId() int64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

type PbftViewChangeWithRawValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewChangeEnv *PbftEnv         `protobuf:"bytes,1,opt,name=view_change_env,json=viewChangeEnv,proto3" json:"view_change_env,omitempty"` // view change env
	PreparedSet   *PbftPreparedSet `protobuf:"bytes,2,opt,name=prepared_set,json=preparedSet,proto3" json:"prepared_set,omitempty"`         //prepared messages larger than n
}

func (x *PbftViewChangeWithRawValue) Reset() {
	*x = PbftViewChangeWithRawValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbftViewChangeWithRawValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbftViewChangeWithRawValue) ProtoMessage() {}

func (x *PbftViewChangeWithRawValue) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbftViewChangeWithRawValue.ProtoReflect.Descriptor instead.
func (*PbftViewChangeWithRawValue) Descriptor() ([]byte, []int) {
	return file_consensus_proto_rawDescGZIP(), []int{5}
}

func (x *PbftViewChangeWithRawValue) GetViewChangeEnv() *PbftEnv {
	if x != nil {
		return x.ViewChangeEnv
	}
	return nil
}

func (x *PbftViewChangeWithRawValue) GetPreparedSet() *PbftPreparedSet {
	if x != nil {
		return x.PreparedSet
	}
	return nil
}

type PbftNewView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewNumber  int64      `protobuf:"varint,1,opt,name=view_number,json=viewNumber,proto3" json:"view_number,omitempty"` //v+1
	Sequence    int64      `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`                       //sequence
	ReplicaId   int64      `protobuf:"varint,3,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	ViewChanges []*PbftEnv `protobuf:"bytes,4,rep,name=view_changes,json=viewChanges,proto3" json:"view_changes,omitempty"` //V
	PrePrepare  *PbftEnv   `protobuf:"bytes,5,opt,name=pre_prepare,json=prePrepare,proto3" json:"pre_prepare,omitempty"`    //O
}

func (x *PbftNewView) Reset() {
	*x = PbftNewView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbftNewView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbftNewView) ProtoMessage() {}

func (x *PbftNewView) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbftNewView.ProtoReflect.Descriptor instead.
func (*PbftNewView) Descriptor() ([]byte, []int) {
	return file_consensus_proto_rawDescGZIP(), []int{6}
}

func (x *PbftNewView) GetViewNumber() int64 {
	if x != nil {
		return x.ViewNumber
	}
	return 0
}

func (x *PbftNewView) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PbftNewView) GetReplicaId() int64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *PbftNewView) GetViewChanges() []*PbftEnv {
	if x != nil {
		return x.ViewChanges
	}
	return nil
}

func (x *PbftNewView) GetPrePrepare() *PbftEnv {
	if x != nil {
		return x.PrePrepare
	}
	return nil
}

type Pbft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNumber            int64                       `protobuf:"varint,1,opt,name=round_number,json=roundNumber,proto3" json:"round_number,omitempty"` //for sending again
	Type                   PbftMessageType             `protobuf:"varint,2,opt,name=type,proto3,enum=protocol.PbftMessageType" json:"type,omitempty"`
	PrePrepare             *PbftPrePrepare             `protobuf:"bytes,3,opt,name=pre_prepare,json=prePrepare,proto3" json:"pre_prepare,omitempty"`
	Prepare                *PbftPrepare                `protobuf:"bytes,4,opt,name=prepare,proto3" json:"prepare,omitempty"`
	Commit                 *PbftCommit                 `protobuf:"bytes,5,opt,name=commit,proto3" json:"commit,omitempty"`
	ViewChange             *PbftViewChange             `protobuf:"bytes,6,opt,name=view_change,json=viewChange,proto3" json:"view_change,omitempty"`
	NewView                *PbftNewView                `protobuf:"bytes,7,opt,name=new_view,json=newView,proto3" json:"new_view,omitempty"`
	ViewChangeWithRawvalue *PbftViewChangeWithRawValue `protobuf:"bytes,8,opt,name=view_change_with_rawvalue,json=viewChangeWithRawvalue,proto3" json:"view_change_with_rawvalue,omitempty"`
	ChainId                int64                       `protobuf:"varint,9,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *Pbft) Reset() {
	*x = Pbft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pbft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pbft) ProtoMessage() {}

func (x *Pbft) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pbft.ProtoReflect.Descriptor instead.
func (*Pbft) Descriptor() ([]byte, []int) {
	return file_consensus_proto_rawDescGZIP(), []int{7}
}

func (x *Pbft) GetRoundNumber() int64 {
	if x != nil {
		return x.RoundNumber
	}
	return 0
}

func (x *Pbft) GetType() PbftMessageType {
	if x != nil {
		return x.Type
	}
	return PbftMessageType_PBFT_TYPE_PREPREPARE
}

func (x *Pbft) GetPrePrepare() *PbftPrePrepare {
	if x != nil {
		return x.PrePrepare
	}
	return nil
}

func (x *Pbft) GetPrepare() *PbftPrepare {
	if x != nil {
		return x.Prepare
	}
	return nil
}

func (x *Pbft) GetCommit() *PbftCommit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *Pbft) GetViewChange() *PbftViewChange {
	if x != nil {
		return x.ViewChange
	}
	return nil
}

func (x *Pbft) GetNewView() *PbftNewView {
	if x != nil {
		return x.NewView
	}
	return nil
}

func (x *Pbft) GetViewChangeWithRawvalue() *PbftViewChangeWithRawValue {
	if x != nil {
		return x.ViewChangeWithRawvalue
	}
	return nil
}

func (x *Pbft) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

type PbftEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pbft      *Pbft      `protobuf:"bytes,1,opt,name=pbft,proto3" json:"pbft,omitempty"`
	Signature *Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *PbftEnv) Reset() {
	*x = PbftEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbftEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbftEnv) ProtoMessage() {}

func (x *PbftEnv) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbftEnv.ProtoReflect.Descriptor instead.
func (*PbftEnv) Descriptor() ([]byte, []int) {
	return file_consensus_proto_rawDescGZIP(), []int{8}
}

func (x *PbftEnv) GetPbft() *Pbft {
	if x != nil {
		return x.Pbft
	}
	return nil
}

func (x *PbftEnv) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ValidatorSetV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validators []string `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (x *ValidatorSetV3) Reset() {
	*x = ValidatorSetV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorSetV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorSetV3) ProtoMessage() {}

func (x *ValidatorSetV3) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorSetV3.ProtoReflect.Descriptor instead.
func (*ValidatorSetV3) Descriptor() ([]byte, []int) {
	return file_consensus_proto_rawDescGZIP(), []int{9}
}

func (x *ValidatorSetV3) GetValidators() []string {
	if x != nil {
		return x.Validators
	}
	return nil
}

type Validator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address          string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PledgeCoinAmount int64  `protobuf:"varint,2,opt,name=pledge_coin_amount,json=pledgeCoinAmount,proto3" json:"pledge_coin_amount,omitempty"`
}

func (x *Validator) Reset() {
	*x = Validator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validator) ProtoMessage() {}

func (x *Validator) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validator.ProtoReflect.Descriptor instead.
func (*Validator) Descriptor() ([]byte, []int) {
	return file_consensus_proto_rawDescGZIP(), []int{10}
}

func (x *Validator) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Validator) GetPledgeCoinAmount() int64 {
	if x != nil {
		return x.PledgeCoinAmount
	}
	return 0
}

type ValidatorSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validators []*Validator `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (x *ValidatorSet) Reset() {
	*x = ValidatorSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorSet) ProtoMessage() {}

func (x *ValidatorSet) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorSet.ProtoReflect.Descriptor instead.
func (*ValidatorSet) Descriptor() ([]byte, []int) {
	return file_consensus_proto_rawDescGZIP(), []int{11}
}

func (x *ValidatorSet) GetValidators() []*Validator {
	if x != nil {
		return x.Validators
	}
	return nil
}

type PbftProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commits []*PbftEnv `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
}

func (x *PbftProof) Reset() {
	*x = PbftProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbftProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbftProof) ProtoMessage() {}

func (x *PbftProof) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbftProof.ProtoReflect.Descriptor instead.
func (*PbftProof) Descriptor() ([]byte, []int) {
	return file_consensus_proto_rawDescGZIP(), []int{12}
}

func (x *PbftProof) GetCommits() []*PbftEnv {
	if x != nil {
		return x.Commits
	}
	return nil
}

type FeeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasPrice    int64 `protobuf:"varint,1,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	BaseReserve int64 `protobuf:"varint,2,opt,name=base_reserve,json=baseReserve,proto3" json:"base_reserve,omitempty"`
}

func (x *FeeConfig) Reset() {
	*x = FeeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_consensus_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeConfig) ProtoMessage() {}

func (x *FeeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_consensus_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeConfig.ProtoReflect.Descriptor instead.
func (*FeeConfig) Descriptor() ([]byte, []int) {
	return file_consensus_proto_rawDescGZIP(), []int{13}
}

func (x *FeeConfig) GetGasPrice() int64 {
	if x != nil {
		return x.GasPrice
	}
	return 0
}

func (x *FeeConfig) GetBaseReserve() int64 {
	if x != nil {
		return x.BaseReserve
	}
	return 0
}

var File_consensus_proto protoreflect.FileDescriptor

var file_consensus_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x01, 0x0a, 0x0e, 0x50, 0x62,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x22, 0x8c, 0x01, 0x0a, 0x0b, 0x50, 0x62, 0x66, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x22, 0x8b, 0x01, 0x0a, 0x0a, 0x50, 0x62, 0x66, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x72,
	0x0a, 0x0f, 0x50, 0x62, 0x66, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65,
	0x74, 0x12, 0x32, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x62, 0x66, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x62, 0x66, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x07, 0x70, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x0e, 0x50, 0x62, 0x66, 0x74, 0x56, 0x69, 0x65, 0x77, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x12, 0x70, 0x72, 0x65, 0x70, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x1a, 0x50, 0x62, 0x66, 0x74, 0x56, 0x69, 0x65, 0x77,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x61, 0x77, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x39, 0x0a, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x62, 0x66, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x0d,
	0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x3c, 0x0a,
	0x0c, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x62, 0x66, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x0b,
	0x50, 0x62, 0x66, 0x74, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x62, 0x66, 0x74, 0x45, 0x6e, 0x76,
	0x52, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x32, 0x0a,
	0x0b, 0x70, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x62,
	0x66, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x22, 0xdb, 0x03, 0x0a, 0x04, 0x50, 0x62, 0x66, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x62, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0b,
	0x70, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x62, 0x66,
	0x74, 0x50, 0x72, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x62, 0x66, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52,
	0x07, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x62, 0x66, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x62, 0x66, 0x74, 0x56, 0x69, 0x65, 0x77, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x30, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x62, 0x66, 0x74, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x56,
	0x69, 0x65, 0x77, 0x12, 0x5f, 0x0a, 0x19, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x62, 0x66, 0x74, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x52, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x76, 0x69,
	0x65, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x61, 0x77, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22,
	0x60, 0x0a, 0x07, 0x50, 0x62, 0x66, 0x74, 0x45, 0x6e, 0x76, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x62,
	0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x62, 0x66, 0x74, 0x52, 0x04, 0x70, 0x62, 0x66, 0x74, 0x12, 0x31,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x30, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65,
	0x74, 0x56, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x22, 0x53, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x38, 0x0a,
	0x09, 0x50, 0x62, 0x66, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x62, 0x66, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x09, 0x46, 0x65, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x22, 0x34, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x41,
	0x53, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x10, 0x02, 0x2a, 0xb0, 0x01, 0x0a, 0x0f,
	0x50, 0x62, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x42, 0x46, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45,
	0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x42, 0x46,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x42, 0x46, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x42, 0x46, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x42, 0x46, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45,
	0x57, 0x56, 0x49, 0x45, 0x57, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x42, 0x46, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x52, 0x41, 0x57, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x05, 0x2a, 0x38,
	0x0a, 0x0d, 0x50, 0x62, 0x66, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x42, 0x46, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x58,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x42, 0x46, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x54, 0x58, 0x53, 0x45, 0x54, 0x10, 0x01, 0x42, 0x25, 0x0a, 0x23, 0x69, 0x6f, 0x2e, 0x62,
	0x75, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_consensus_proto_rawDescOnce sync.Once
	file_consensus_proto_rawDescData = file_consensus_proto_rawDesc
)

func file_consensus_proto_rawDescGZIP() []byte {
	file_consensus_proto_rawDescOnce.Do(func() {
		file_consensus_proto_rawDescData = protoimpl.X.CompressGZIP(file_consensus_proto_rawDescData)
	})
	return file_consensus_proto_rawDescData
}

var file_consensus_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_consensus_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_consensus_proto_goTypes = []interface{}{
	(PbftMessageType)(0),               // 0: protocol.PbftMessageType
	(PbftValueType)(0),                 // 1: protocol.PbftValueType
	(FeeConfig_Type)(0),                // 2: protocol.FeeConfig.Type
	(*PbftPrePrepare)(nil),             // 3: protocol.PbftPrePrepare
	(*PbftPrepare)(nil),                // 4: protocol.PbftPrepare
	(*PbftCommit)(nil),                 // 5: protocol.PbftCommit
	(*PbftPreparedSet)(nil),            // 6: protocol.PbftPreparedSet
	(*PbftViewChange)(nil),             // 7: protocol.PbftViewChange
	(*PbftViewChangeWithRawValue)(nil), // 8: protocol.PbftViewChangeWithRawValue
	(*PbftNewView)(nil),                // 9: protocol.PbftNewView
	(*Pbft)(nil),                       // 10: protocol.Pbft
	(*PbftEnv)(nil),                    // 11: protocol.PbftEnv
	(*ValidatorSetV3)(nil),             // 12: protocol.ValidatorSetV3
	(*Validator)(nil),                  // 13: protocol.Validator
	(*ValidatorSet)(nil),               // 14: protocol.ValidatorSet
	(*PbftProof)(nil),                  // 15: protocol.PbftProof
	(*FeeConfig)(nil),                  // 16: protocol.FeeConfig
	(*Signature)(nil),                  // 17: protocol.Signature
}
var file_consensus_proto_depIdxs = []int32{
	11, // 0: protocol.PbftPreparedSet.pre_prepare:type_name -> protocol.PbftEnv
	11, // 1: protocol.PbftPreparedSet.prepare:type_name -> protocol.PbftEnv
	11, // 2: protocol.PbftViewChangeWithRawValue.view_change_env:type_name -> protocol.PbftEnv
	6,  // 3: protocol.PbftViewChangeWithRawValue.prepared_set:type_name -> protocol.PbftPreparedSet
	11, // 4: protocol.PbftNewView.view_changes:type_name -> protocol.PbftEnv
	11, // 5: protocol.PbftNewView.pre_prepare:type_name -> protocol.PbftEnv
	0,  // 6: protocol.Pbft.type:type_name -> protocol.PbftMessageType
	3,  // 7: protocol.Pbft.pre_prepare:type_name -> protocol.PbftPrePrepare
	4,  // 8: protocol.Pbft.prepare:type_name -> protocol.PbftPrepare
	5,  // 9: protocol.Pbft.commit:type_name -> protocol.PbftCommit
	7,  // 10: protocol.Pbft.view_change:type_name -> protocol.PbftViewChange
	9,  // 11: protocol.Pbft.new_view:type_name -> protocol.PbftNewView
	8,  // 12: protocol.Pbft.view_change_with_rawvalue:type_name -> protocol.PbftViewChangeWithRawValue
	10, // 13: protocol.PbftEnv.pbft:type_name -> protocol.Pbft
	17, // 14: protocol.PbftEnv.signature:type_name -> protocol.Signature
	13, // 15: protocol.ValidatorSet.validators:type_name -> protocol.Validator
	11, // 16: protocol.PbftProof.commits:type_name -> protocol.PbftEnv
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_consensus_proto_init() }
func file_consensus_proto_init() {
	if File_consensus_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_consensus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbftPrePrepare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbftPrepare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbftCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbftPreparedSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbftViewChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbftViewChangeWithRawValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbftNewView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pbft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbftEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorSetV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbftProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_consensus_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_consensus_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_consensus_proto_goTypes,
		DependencyIndexes: file_consensus_proto_depIdxs,
		EnumInfos:         file_consensus_proto_enumTypes,
		MessageInfos:      file_consensus_proto_msgTypes,
	}.Build()
	File_consensus_proto = out.File
	file_consensus_proto_rawDesc = nil
	file_consensus_proto_goTypes = nil
	file_consensus_proto_depIdxs = nil
}
